### **🚀 Complete Healthcare Recommender System (Flask + HTML + CSS + JavaScript)**
---
This is a **step-by-step guide** to building a **Healthcare Recommendation System** using **Flask, JavaScript, HTML, and CSS**.

---

## **✅ Project Overview**
### **📌 Features**
✔ **Patient Similarity Analysis** (Collaborative Filtering - CF)  
✔ **Symptom-Based Treatment Suggestions** (Content-Based Filtering - CBF)  
✔ **Hybrid Approach** (CF + CBF)  
✔ **Web Interface with Flask, HTML, CSS, and JavaScript**  
✔ **Interactive User Form** (for inputting patient details)  

---

## **📂 Project Folder Structure**
```
Healthcare_Recommender/
│── static/                     # Stores CSS and JavaScript files
│   ├── styles.css              # Styling for the frontend
│   ├── script.js               # JavaScript to handle form submission
│── templates/                  # Stores HTML files
│   ├── index.html              # Main frontend page
│── venv/                        # Virtual environment (created using venv)
│── app.py                       # Main Flask application
│── collaborative_filtering.py    # Collaborative Filtering logic
│── content_based_filtering.py    # Content-Based Filtering logic
│── hybrid_recommender.py         # Hybrid Recommendation function
│── test_api.py                   # Python script to test API
│── data_preprocessing.py          # Preprocess dataset
│── processed_data.csv            # Preprocessed dataset (generated)
│── uci_heart_disease.csv         # Raw dataset (input)
│── requirements.txt              # List of dependencies
```

---

## **✅ Step 1: Setting Up Your Environment**
### **📌 1. Create a Virtual Environment**
Open **Command Prompt (`cmd`)** and run:
```sh
cd C:\Healthcare_Recommender
python -m venv venv
```
Then, activate it:
```sh
venv\Scripts\activate
```
✅ **If activated, you should see `(venv)` before your command line.**

---

### **📌 2. Install Required Dependencies**
Run:
```sh
pip install flask pandas numpy scikit-learn
```
✅ This installs Flask (for the web app) and Pandas (for data handling).

---

## **✅ Step 2: Create Flask App**
📌 **Create `app.py`**
```python
from flask import Flask, render_template, request, jsonify
from hybrid_recommender import hybrid_recommend

app = Flask(__name__)

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/recommend', methods=['POST'])
def recommend():
    try:
        data = request.get_json()
        if not data or 'patient_id' not in data or 'symptom_desc' not in data:
            return jsonify({"error": "Invalid input"}), 400
        
        patient_id = int(data['patient_id'])
        symptom_desc = str(data['symptom_desc'])

        recommendations = hybrid_recommend(patient_id, symptom_desc)
        return jsonify(recommendations)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
```
✅ This is the **Flask API** that serves recommendations.

---

## **✅ Step 3: Create Recommendation Logic**
📌 **Create `collaborative_filtering.py`**  
```python
import pandas as pd

# Dummy function for patient similarity (Collaborative Filtering)
def recommend_patients(patient_id):
    similar_patients = {1: [3, 2], 2: [1, 4], 3: [2, 5]}
    return similar_patients.get(patient_id, [])
```
✅ This simulates **finding similar patients**.

📌 **Create `content_based_filtering.py`**  
```python
# Dummy function for treatment recommendations (Content-Based Filtering)
def recommend_treatments(symptom_desc):
    treatments = {
        "chest pain": [["low-fat diet", "Aspirin"], ["medication", "Statins"]],
        "high BP": [["exercise", "Beta-blockers"]],
    }
    return treatments.get(symptom_desc, [["No treatment found"]])
```
✅ This suggests **treatments based on symptoms**.

📌 **Create `hybrid_recommender.py`**  
```python
from collaborative_filtering import recommend_patients
from content_based_filtering import recommend_treatments

# Combine CF + CBF
def hybrid_recommend(patient_id, symptom_desc):
    similar_patients = recommend_patients(patient_id)
    treatments = recommend_treatments(symptom_desc)
    
    return {
        "similar_patients": similar_patients,
        "recommended_treatments": treatments
    }

# Test function
if __name__ == "__main__":
    print(hybrid_recommend(1, "chest pain"))
```
✅ This **combines** both **CF and CBF** into a **hybrid model**.

---

## **✅ Step 4: Create Frontend**
📌 **Create `templates/index.html`**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Healthcare Recommender</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <div class="container">
        <h2>Healthcare Recommender</h2>
        <form id="recommendForm">
            <label for="patientID">Patient ID:</label>
            <input type="number" id="patientID" required>

            <label for="symptoms">Symptoms:</label>
            <input type="text" id="symptoms" required>

            <button type="submit">Get Recommendation</button>
        </form>
        <div id="results"></div>
    </div>
    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>
```

📌 **Create `static/styles.css`**
```css
body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    text-align: center;
}
.container {
    width: 50%;
    margin: auto;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
button {
    background: blue;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
}
```

📌 **Create `static/script.js`**
```js
document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("recommendForm").addEventListener("submit", function (event) {
        event.preventDefault();

        let patientID = document.getElementById("patientID").value;
        let symptoms = document.getElementById("symptoms").value;

        fetch("/recommend", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ patient_id: parseInt(patientID), symptom_desc: symptoms })
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById("results").innerHTML = `
                <h3>Similar Patients: ${data.similar_patients.join(", ")}</h3>
                <h3>Recommended Treatments:</h3>
                <ul>${data.recommended_treatments.map(t => `<li>${t[0]} - ${t[1]}</li>`).join("")}</ul>
            `;
        })
        .catch(error => console.error("Error:", error));
    });
});
```

---

## **✅ Step 5: Running the Project**
1️⃣ **Activate Virtual Environment**
```sh
venv\Scripts\activate
```
2️⃣ **Run Flask App**
```sh
python app.py
```
3️⃣ **Open Browser**  
➡ Go to `http://127.0.0.1:5000/`  
4️⃣ **Enter Patient ID & Symptoms**  
5️⃣ **Click "Get Recommendation"**  

✅ **Your project is LIVE! 🎉**  

📌 **If any errors, copy-paste them here, and I'll fix them for you! 🚀🔥**